<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/econ.proto

namespace Chescos\CsProto\CEconItemPreviewDataBlock;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>CEconItemPreviewDataBlock.Sticker</code>
 */
class Sticker extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>uint32 slot = 1;</code>
     */
    protected $slot = null;
    /**
     * Generated from protobuf field <code>uint32 sticker_id = 2;</code>
     */
    protected $sticker_id = null;
    /**
     * Generated from protobuf field <code>float wear = 3;</code>
     */
    protected $wear = null;
    /**
     * Generated from protobuf field <code>float scale = 4;</code>
     */
    protected $scale = null;
    /**
     * Generated from protobuf field <code>float rotation = 5;</code>
     */
    protected $rotation = null;
    /**
     * Generated from protobuf field <code>uint32 tint_id = 6;</code>
     */
    protected $tint_id = null;
    /**
     * Generated from protobuf field <code>float offset_x = 7;</code>
     */
    protected $offset_x = null;
    /**
     * Generated from protobuf field <code>float offset_y = 8;</code>
     */
    protected $offset_y = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $slot
     *     @type int $sticker_id
     *     @type float $wear
     *     @type float $scale
     *     @type float $rotation
     *     @type int $tint_id
     *     @type float $offset_x
     *     @type float $offset_y
     * }
     */
    public function __construct($data = NULL) {
        \Chescos\CsProto\Metadata\Econ::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>uint32 slot = 1;</code>
     * @return int
     */
    public function getSlot()
    {
        return isset($this->slot) ? $this->slot : 0;
    }

    public function hasSlot()
    {
        return isset($this->slot);
    }

    public function clearSlot()
    {
        unset($this->slot);
    }

    /**
     * Generated from protobuf field <code>uint32 slot = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setSlot($var)
    {
        GPBUtil::checkUint32($var);
        $this->slot = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 sticker_id = 2;</code>
     * @return int
     */
    public function getStickerId()
    {
        return isset($this->sticker_id) ? $this->sticker_id : 0;
    }

    public function hasStickerId()
    {
        return isset($this->sticker_id);
    }

    public function clearStickerId()
    {
        unset($this->sticker_id);
    }

    /**
     * Generated from protobuf field <code>uint32 sticker_id = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setStickerId($var)
    {
        GPBUtil::checkUint32($var);
        $this->sticker_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>float wear = 3;</code>
     * @return float
     */
    public function getWear()
    {
        return isset($this->wear) ? $this->wear : 0.0;
    }

    public function hasWear()
    {
        return isset($this->wear);
    }

    public function clearWear()
    {
        unset($this->wear);
    }

    /**
     * Generated from protobuf field <code>float wear = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setWear($var)
    {
        GPBUtil::checkFloat($var);
        $this->wear = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>float scale = 4;</code>
     * @return float
     */
    public function getScale()
    {
        return isset($this->scale) ? $this->scale : 0.0;
    }

    public function hasScale()
    {
        return isset($this->scale);
    }

    public function clearScale()
    {
        unset($this->scale);
    }

    /**
     * Generated from protobuf field <code>float scale = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setScale($var)
    {
        GPBUtil::checkFloat($var);
        $this->scale = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>float rotation = 5;</code>
     * @return float
     */
    public function getRotation()
    {
        return isset($this->rotation) ? $this->rotation : 0.0;
    }

    public function hasRotation()
    {
        return isset($this->rotation);
    }

    public function clearRotation()
    {
        unset($this->rotation);
    }

    /**
     * Generated from protobuf field <code>float rotation = 5;</code>
     * @param float $var
     * @return $this
     */
    public function setRotation($var)
    {
        GPBUtil::checkFloat($var);
        $this->rotation = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 tint_id = 6;</code>
     * @return int
     */
    public function getTintId()
    {
        return isset($this->tint_id) ? $this->tint_id : 0;
    }

    public function hasTintId()
    {
        return isset($this->tint_id);
    }

    public function clearTintId()
    {
        unset($this->tint_id);
    }

    /**
     * Generated from protobuf field <code>uint32 tint_id = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setTintId($var)
    {
        GPBUtil::checkUint32($var);
        $this->tint_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>float offset_x = 7;</code>
     * @return float
     */
    public function getOffsetX()
    {
        return isset($this->offset_x) ? $this->offset_x : 0.0;
    }

    public function hasOffsetX()
    {
        return isset($this->offset_x);
    }

    public function clearOffsetX()
    {
        unset($this->offset_x);
    }

    /**
     * Generated from protobuf field <code>float offset_x = 7;</code>
     * @param float $var
     * @return $this
     */
    public function setOffsetX($var)
    {
        GPBUtil::checkFloat($var);
        $this->offset_x = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>float offset_y = 8;</code>
     * @return float
     */
    public function getOffsetY()
    {
        return isset($this->offset_y) ? $this->offset_y : 0.0;
    }

    public function hasOffsetY()
    {
        return isset($this->offset_y);
    }

    public function clearOffsetY()
    {
        unset($this->offset_y);
    }

    /**
     * Generated from protobuf field <code>float offset_y = 8;</code>
     * @param float $var
     * @return $this
     */
    public function setOffsetY($var)
    {
        GPBUtil::checkFloat($var);
        $this->offset_y = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Sticker::class, \Chescos\CsProto\CEconItemPreviewDataBlock_Sticker::class);

